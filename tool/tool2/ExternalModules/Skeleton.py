#! /usr/bin/python

## # This script is automatiquely generated by autobuild-TestScript.py according to a configFile
## Developed by Maurizio Montis (INFN Legnaro - Italy) and Jean-Francois DENIS (CEA - France)
## Mails: maurizio.montis@lnl.infn.it and jfdenis@cea.fr

#######################################################
################# Libraries ###########################
#######################################################

from epics import caget, caput, PV		# Library for the EPICS Channel Access
from reportlab.pdfgen import canvas		# Library for generate PDF File
from reportlab.lib.units import cm		# ....
import unittest					# module provides a rich set of tools for constructing and running tests
import time					# This module provides various time-related functions
import sys					# This module provides functions and variables that can be used to manipulate the Python runtime 						  environment.
import datetime, os, string			# Library for times
from reportlab.lib.pagesizes import letter	# Library to create/write PDF file
import warnings					# Library to customise warning messages

#######################################################
################# Variables     #######################
#######################################################

# date
now_date = time.strftime('%Y-%m-%d_%H-%M-%S', time.localtime(time.time()))
now_date_pdf = time.strftime('%d/%m/%Y - %H:%M:%S', time.localtime(time.time()))

# output directory and file
results_dir = 'Tests_results_' + now_date
results_file_name = 'tests_results.txt'
results_file_pdf = 'tests_results.pdf'


#######################################################
################# Function     ########################
#######################################################

# Create PDF header and set document property:
#			- pdf_object = canvas object associated to PDF 
#			- date_time  = date and time cformatted for PDF document

def pdf_header ( pdf_object, date_time ):
	
	pdf_object.setFont('Helvetica', 14)
	pdf_object.drawString(30,780, "IFMIF-EVEDA")
	pdf_object.drawString(30,760, "Acceptance Test : python test procedure")
	pdf_object.drawString(420,780, date_time)
	pdf_object.line(30,755,560,755)
	pdf_object.line(30,55,560,55)	


# Write to PDF a text with custom features:
#			- pdf_object = canvas object associated to PDF 
#			- text_to_write  = text to insert into the document
#			- date_doc = date and time when PDF is produced

def write_to_pdf ( pdf_object, text_to_write, date_doc ):
	
	cnt=0
	pdf_header(pdf_object, date_doc)
	pdf_object.setFont('Helvetica' , 10)
	for line in text_to_write:
		if cnt > 64 :
			pdf_object.showPage()
			pdf_header(pdf_object, date_doc)
			pdf_object.setFont('Helvetica' , 10)
			cnt = 0
		else:
			cnt+=1
		pdf_object.drawString(30,720-10*cnt, line)
	
	pdf_object.save()

# Formating warning message
def WarningMessage(message, category, filename, lineno, file=None, line=None):
    return 'Warning : %s ' % (message)

#######################################################
##################### MAIN ############################
#######################################################

# Creation of the new format for warning
warnings.formatwarning = WarningMessage

# Create directory and file for detailed results
if not os.path.exists(results_dir):
	os.makedirs(results_dir)
	results_file = open(results_dir+'/'+results_file_name, 'w')

# Create Final Report - part 1:
results_file.write('################################## TEST PERFORMED ON '+ now_date_pdf +' ##################################\n\n')
results_file.write('\n############## PV CONNECTION TEST ##############\n\n')

###################################
##### Connection test of PV #######
###################################

listPvDisconnect =list()
listPvConnect =list()

>>>>>>>>>>CONNECTION_SCRIPT<<<<<<<<<<

if len(listPvDisconnect) != 0 : 
				print "\n>>>>>>> ERROR : Some PV are disconnected <<<<<<<<<<\n"
				results_file.write('\n=> ERROR : Some PV are disconnected : \n\n')
				for i in range(len(listPvDisconnect)) : results_file.write('\t- '+listPvDisconnect[i]+ '\n')
				results_file.write('\n=> Program is stopped du to PV disconnected!!!!!! \n\n')
				sys.exit(2)
else : 
	print "\n>>>>>>> success : All PV are connected <<<<<<<<<<\n"
	results_file.write('=> success : All PV are connected\n\n')

###################################
########## UserCase ###############
###################################

# header file
results_file.write('\n############## TEST BEGINING ##############\n')

# Initialisation of the test procedure
class TestIFMIF(unittest.TestCase):
    	def 	setUp(self):
 	    	pass
# Test cases substituted
>>>>>>>>>>UNITTEST_SCRIPT<<<<<<<<<<
#### Starting tests procedure
suite = unittest.TestLoader().loadTestsFromTestCase(TestIFMIF)
unittest.TextTestRunner(verbosity=2).run(suite)

# End file
results_file.write('\n\n############## TEST END ##############')


# close detailed results file
results_file.close()

# PDF documentation
text_to_modify = open(results_dir+'/'+results_file_name, 'r').readlines()
text_to_pdf = []
for elem in text_to_modify:
	text_to_pdf.append(elem.replace('\t','').replace('\r','').replace('\n',''))
		
doc_pdf = canvas.Canvas(results_dir+'/'+results_file_pdf)
write_to_pdf(doc_pdf, text_to_pdf, now_date_pdf)
		
print '\n For details about ERRORS and/or WARNINGS consult ./' + results_dir + '/' + results_file_name + ' \n'
